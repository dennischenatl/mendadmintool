/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserClinic } from "./UserClinic";
import { UserClinicCountArgs } from "./UserClinicCountArgs";
import { UserClinicFindManyArgs } from "./UserClinicFindManyArgs";
import { UserClinicFindUniqueArgs } from "./UserClinicFindUniqueArgs";
import { CreateUserClinicArgs } from "./CreateUserClinicArgs";
import { UpdateUserClinicArgs } from "./UpdateUserClinicArgs";
import { DeleteUserClinicArgs } from "./DeleteUserClinicArgs";
import { ClinicFindManyArgs } from "../../clinic/base/ClinicFindManyArgs";
import { Clinic } from "../../clinic/base/Clinic";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserClinicService } from "../userClinic.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserClinic)
export class UserClinicResolverBase {
  constructor(
    protected readonly service: UserClinicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "read",
    possession: "any",
  })
  async _userClinicsMeta(
    @graphql.Args() args: UserClinicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserClinic])
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "read",
    possession: "any",
  })
  async userClinics(
    @graphql.Args() args: UserClinicFindManyArgs
  ): Promise<UserClinic[]> {
    return this.service.userClinics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserClinic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "read",
    possession: "own",
  })
  async userClinic(
    @graphql.Args() args: UserClinicFindUniqueArgs
  ): Promise<UserClinic | null> {
    const result = await this.service.userClinic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserClinic)
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "create",
    possession: "any",
  })
  async createUserClinic(
    @graphql.Args() args: CreateUserClinicArgs
  ): Promise<UserClinic> {
    return await this.service.createUserClinic({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserClinic)
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async updateUserClinic(
    @graphql.Args() args: UpdateUserClinicArgs
  ): Promise<UserClinic | null> {
    try {
      return await this.service.updateUserClinic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserClinic)
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "delete",
    possession: "any",
  })
  async deleteUserClinic(
    @graphql.Args() args: DeleteUserClinicArgs
  ): Promise<UserClinic | null> {
    try {
      return await this.service.deleteUserClinic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Clinic], { name: "clinic" })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "any",
  })
  async findClinic(
    @graphql.Parent() parent: UserClinic,
    @graphql.Args() args: ClinicFindManyArgs
  ): Promise<Clinic[]> {
    const results = await this.service.findClinic(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "user" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUser(
    @graphql.Parent() parent: UserClinic,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
