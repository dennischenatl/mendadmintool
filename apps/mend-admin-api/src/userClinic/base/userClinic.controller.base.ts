/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserClinicService } from "../userClinic.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserClinicCreateInput } from "./UserClinicCreateInput";
import { UserClinic } from "./UserClinic";
import { UserClinicFindManyArgs } from "./UserClinicFindManyArgs";
import { UserClinicWhereUniqueInput } from "./UserClinicWhereUniqueInput";
import { UserClinicUpdateInput } from "./UserClinicUpdateInput";
import { ClinicFindManyArgs } from "../../clinic/base/ClinicFindManyArgs";
import { Clinic } from "../../clinic/base/Clinic";
import { ClinicWhereUniqueInput } from "../../clinic/base/ClinicWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserClinicControllerBase {
  constructor(
    protected readonly service: UserClinicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserClinic })
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserClinic(
    @common.Body() data: UserClinicCreateInput
  ): Promise<UserClinic> {
    return await this.service.createUserClinic({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserClinic] })
  @ApiNestedQuery(UserClinicFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userClinics(@common.Req() request: Request): Promise<UserClinic[]> {
    const args = plainToClass(UserClinicFindManyArgs, request.query);
    return this.service.userClinics({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserClinic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userClinic(
    @common.Param() params: UserClinicWhereUniqueInput
  ): Promise<UserClinic | null> {
    const result = await this.service.userClinic({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserClinic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserClinic(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() data: UserClinicUpdateInput
  ): Promise<UserClinic | null> {
    try {
      return await this.service.updateUserClinic({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserClinic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserClinic(
    @common.Param() params: UserClinicWhereUniqueInput
  ): Promise<UserClinic | null> {
    try {
      return await this.service.deleteUserClinic({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/clinic")
  @ApiNestedQuery(ClinicFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "any",
  })
  async findClinic(
    @common.Req() request: Request,
    @common.Param() params: UserClinicWhereUniqueInput
  ): Promise<Clinic[]> {
    const query = plainToClass(ClinicFindManyArgs, request.query);
    const results = await this.service.findClinic(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clinic")
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async connectClinic(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() body: ClinicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clinic: {
        connect: body,
      },
    };
    await this.service.updateUserClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clinic")
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async updateClinic(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() body: ClinicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clinic: {
        set: body,
      },
    };
    await this.service.updateUserClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clinic")
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async disconnectClinic(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() body: ClinicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clinic: {
        disconnect: body,
      },
    };
    await this.service.updateUserClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/user")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUser(
    @common.Req() request: Request,
    @common.Param() params: UserClinicWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUser(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/user")
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async connectUser(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        connect: body,
      },
    };
    await this.service.updateUserClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/user")
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async updateUser(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        set: body,
      },
    };
    await this.service.updateUserClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/user")
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "update",
    possession: "any",
  })
  async disconnectUser(
    @common.Param() params: UserClinicWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      user: {
        disconnect: body,
      },
    };
    await this.service.updateUserClinic({
      where: params,
      data,
      select: { id: true },
    });
  }
}
