/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Clinic } from "./Clinic";
import { ClinicCountArgs } from "./ClinicCountArgs";
import { ClinicFindManyArgs } from "./ClinicFindManyArgs";
import { ClinicFindUniqueArgs } from "./ClinicFindUniqueArgs";
import { CreateClinicArgs } from "./CreateClinicArgs";
import { UpdateClinicArgs } from "./UpdateClinicArgs";
import { DeleteClinicArgs } from "./DeleteClinicArgs";
import { UserClinicFindManyArgs } from "../../userClinic/base/UserClinicFindManyArgs";
import { UserClinic } from "../../userClinic/base/UserClinic";
import { ClinicService } from "../clinic.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Clinic)
export class ClinicResolverBase {
  constructor(
    protected readonly service: ClinicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "any",
  })
  async _clinicsMeta(
    @graphql.Args() args: ClinicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Clinic])
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "any",
  })
  async clinics(@graphql.Args() args: ClinicFindManyArgs): Promise<Clinic[]> {
    return this.service.clinics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Clinic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "own",
  })
  async clinic(
    @graphql.Args() args: ClinicFindUniqueArgs
  ): Promise<Clinic | null> {
    const result = await this.service.clinic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Clinic)
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "create",
    possession: "any",
  })
  async createClinic(@graphql.Args() args: CreateClinicArgs): Promise<Clinic> {
    return await this.service.createClinic({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Clinic)
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async updateClinic(
    @graphql.Args() args: UpdateClinicArgs
  ): Promise<Clinic | null> {
    try {
      return await this.service.updateClinic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Clinic)
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "delete",
    possession: "any",
  })
  async deleteClinic(
    @graphql.Args() args: DeleteClinicArgs
  ): Promise<Clinic | null> {
    try {
      return await this.service.deleteClinic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserClinic], { name: "userClinics" })
  @nestAccessControl.UseRoles({
    resource: "UserClinic",
    action: "read",
    possession: "any",
  })
  async findUserClinics(
    @graphql.Parent() parent: Clinic,
    @graphql.Args() args: UserClinicFindManyArgs
  ): Promise<UserClinic[]> {
    const results = await this.service.findUserClinics(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
