/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserLoginHistory } from "./UserLoginHistory";
import { UserLoginHistoryCountArgs } from "./UserLoginHistoryCountArgs";
import { UserLoginHistoryFindManyArgs } from "./UserLoginHistoryFindManyArgs";
import { UserLoginHistoryFindUniqueArgs } from "./UserLoginHistoryFindUniqueArgs";
import { CreateUserLoginHistoryArgs } from "./CreateUserLoginHistoryArgs";
import { UpdateUserLoginHistoryArgs } from "./UpdateUserLoginHistoryArgs";
import { DeleteUserLoginHistoryArgs } from "./DeleteUserLoginHistoryArgs";
import { UserLoginHistoryService } from "../userLoginHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserLoginHistory)
export class UserLoginHistoryResolverBase {
  constructor(
    protected readonly service: UserLoginHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserLoginHistory",
    action: "read",
    possession: "any",
  })
  async _userLoginHistoriesMeta(
    @graphql.Args() args: UserLoginHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserLoginHistory])
  @nestAccessControl.UseRoles({
    resource: "UserLoginHistory",
    action: "read",
    possession: "any",
  })
  async userLoginHistories(
    @graphql.Args() args: UserLoginHistoryFindManyArgs
  ): Promise<UserLoginHistory[]> {
    return this.service.userLoginHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserLoginHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserLoginHistory",
    action: "read",
    possession: "own",
  })
  async userLoginHistory(
    @graphql.Args() args: UserLoginHistoryFindUniqueArgs
  ): Promise<UserLoginHistory | null> {
    const result = await this.service.userLoginHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserLoginHistory)
  @nestAccessControl.UseRoles({
    resource: "UserLoginHistory",
    action: "create",
    possession: "any",
  })
  async createUserLoginHistory(
    @graphql.Args() args: CreateUserLoginHistoryArgs
  ): Promise<UserLoginHistory> {
    return await this.service.createUserLoginHistory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserLoginHistory)
  @nestAccessControl.UseRoles({
    resource: "UserLoginHistory",
    action: "update",
    possession: "any",
  })
  async updateUserLoginHistory(
    @graphql.Args() args: UpdateUserLoginHistoryArgs
  ): Promise<UserLoginHistory | null> {
    try {
      return await this.service.updateUserLoginHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserLoginHistory)
  @nestAccessControl.UseRoles({
    resource: "UserLoginHistory",
    action: "delete",
    possession: "any",
  })
  async deleteUserLoginHistory(
    @graphql.Args() args: DeleteUserLoginHistoryArgs
  ): Promise<UserLoginHistory | null> {
    try {
      return await this.service.deleteUserLoginHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
