/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SampleEntity as PrismaSampleEntity } from "@prisma/client";

export class SampleEntityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SampleEntityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sampleEntity.count(args);
  }

  async sampleEntities(
    args: Prisma.SampleEntityFindManyArgs
  ): Promise<PrismaSampleEntity[]> {
    return this.prisma.sampleEntity.findMany(args);
  }
  async sampleEntity(
    args: Prisma.SampleEntityFindUniqueArgs
  ): Promise<PrismaSampleEntity | null> {
    return this.prisma.sampleEntity.findUnique(args);
  }
  async createSampleEntity(
    args: Prisma.SampleEntityCreateArgs
  ): Promise<PrismaSampleEntity> {
    return this.prisma.sampleEntity.create(args);
  }
  async updateSampleEntity(
    args: Prisma.SampleEntityUpdateArgs
  ): Promise<PrismaSampleEntity> {
    return this.prisma.sampleEntity.update(args);
  }
  async deleteSampleEntity(
    args: Prisma.SampleEntityDeleteArgs
  ): Promise<PrismaSampleEntity> {
    return this.prisma.sampleEntity.delete(args);
  }
}
