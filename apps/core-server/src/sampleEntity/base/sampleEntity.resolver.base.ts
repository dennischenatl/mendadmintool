/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SampleEntity } from "./SampleEntity";
import { SampleEntityCountArgs } from "./SampleEntityCountArgs";
import { SampleEntityFindManyArgs } from "./SampleEntityFindManyArgs";
import { SampleEntityFindUniqueArgs } from "./SampleEntityFindUniqueArgs";
import { CreateSampleEntityArgs } from "./CreateSampleEntityArgs";
import { UpdateSampleEntityArgs } from "./UpdateSampleEntityArgs";
import { DeleteSampleEntityArgs } from "./DeleteSampleEntityArgs";
import { SampleEntityService } from "../sampleEntity.service";
@graphql.Resolver(() => SampleEntity)
export class SampleEntityResolverBase {
  constructor(protected readonly service: SampleEntityService) {}

  async _sampleEntitiesMeta(
    @graphql.Args() args: SampleEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SampleEntity])
  async sampleEntities(
    @graphql.Args() args: SampleEntityFindManyArgs
  ): Promise<SampleEntity[]> {
    return this.service.sampleEntities(args);
  }

  @graphql.Query(() => SampleEntity, { nullable: true })
  async sampleEntity(
    @graphql.Args() args: SampleEntityFindUniqueArgs
  ): Promise<SampleEntity | null> {
    const result = await this.service.sampleEntity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SampleEntity)
  async createSampleEntity(
    @graphql.Args() args: CreateSampleEntityArgs
  ): Promise<SampleEntity> {
    return await this.service.createSampleEntity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SampleEntity)
  async updateSampleEntity(
    @graphql.Args() args: UpdateSampleEntityArgs
  ): Promise<SampleEntity | null> {
    try {
      return await this.service.updateSampleEntity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SampleEntity)
  async deleteSampleEntity(
    @graphql.Args() args: DeleteSampleEntityArgs
  ): Promise<SampleEntity | null> {
    try {
      return await this.service.deleteSampleEntity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
